// sorted
#ifndef LockLinkedList_h
#define LockLinkedList_h
#include <stdio.h>
#include <iostream>

using namespace std;

template <class T>
struct Node
{
    T data;
    Node *next;
};


//_________________ Linked List Template (Sorted) _______________________
template <class T>
class LinkedList{

public:
  LinkedList();       // Constructor: Inits an empty singly-linked list
  ~LinkedList();      // Destructor: Destroys the singly-linked list 
  int size();         // Returns the size of the singly-linked list
  bool contains(T x); // Returns true if x is in the list, otherwise returns false
  bool add(T x);      // Returns true when successfully added, otherwise returns false
  bool remove(T x);   // Returns true when successfully removed, otherwise returns false
  void print();       // Prints the content of the singly-linked list

private:
  Node<T> *head;      // Pointer to head of singly-linked list
  int listSize;       // Size of singly-linked list
};

//**********************    constructor    **************************
template <class T>
LinkedList<T>::LinkedList()
{
  listSize = 0;
  head = NULL;
}

//**********************    destructor     **************************
template <class T>
LinkedList<T>::~LinkedList()
{
  int i = 0;
  while (i<listSize){
    Node<T> *temp = head;
    head = head->next;
    delete temp;
    i++;
  }
}

//*******************    size() function      ************************
template <class T>
int LinkedList<T>::size(){
  return listSize;
}


//*******************    contain() function    ***********************
template <class T>
bool LinkedList<T>::contains(T x){
		if (listSize==0){
			return false;
		}
		Node<T> *curr = head;
		int i = 0;

		while (i<listSize){
			if (curr->data > x) {
			  return false;
			}
			if (curr->data==x) {
			  return true;
			}
  		curr = curr->next;
			i++;
		}
		return false;
}


//*******************    add() function    ***********************
template <class T>
bool LinkedList<T>::add(T x){
		if (listSize==0){								// first node to be added
			Node<T>* node1 = new Node<T>;
			node1->data = x;
			node1->next = NULL;
			head = node1;
			listSize = 1;
			return true;
		}
		if (x < head->data) {						// replace head with x
			Node<T>* node1 = new Node<T>;
			node1->data = x;
			node1->next = head;
			head = node1;
			listSize++;
			return true;
		}
		Node<T> *pred = head;
		Node<T> *curr = head->next;

		int i = 1;
		while (i<listSize){
			if (curr->data > x)
				break;
			if (curr->data==x){
				return false;
			}
			pred = curr;
			curr = curr->next;
			i++;
		}
		Node<T>* node1 = new Node<T>;
		node1->data = x;
		node1->next = curr;
		pred->next = node1;
		listSize++;
		return true;
}


//*******************    remove() function    ***********************
template <class T>
bool LinkedList<T>::remove(T x){
		if (listSize == 0){
			return false;
		}
		Node<T> *pred = head;
		Node<T> *curr = head;		

		if (head->data == x){
			head = head->next;
			delete pred;
			listSize--;
			return true;
		}
		curr = curr->next;

		int i = 1;
		while (i<listSize){
			if (curr->data > x) {
			  return false;
			}
			if (curr->data == x){
			  pred->next = curr->next;
			  delete curr;
			  listSize--;
			  return true;
			}
			pred = curr;
			curr = curr->next;
			i++;
		}
		return false;
}


//********************    print() function    ***********************
template <class T>
void LinkedList<T>::print(){
  Node<T> *temp = head;
  int i = 0;
  cout << endl;
  while (i<listSize){
    cout << temp->data << " ";
    temp = temp->next;
    i++;
  }
  if (listSize==0)
    cout << "nothing yet";
  cout << endl;
}


#endif
